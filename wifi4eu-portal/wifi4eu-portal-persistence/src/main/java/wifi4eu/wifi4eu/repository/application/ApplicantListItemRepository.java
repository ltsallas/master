package wifi4eu.wifi4eu.repository.application;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import wifi4eu.wifi4eu.entity.application.ApplicantListItem;

import java.util.List;

public interface ApplicantListItemRepository extends CrudRepository<ApplicantListItem, Integer> {
    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY lauId ASC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByLauIdAsc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY lauId DESC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByLauIdDesc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY lauId ASC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByLauIdAsc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY lauId DESC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByLauIdDesc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY name ASC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByNameAsc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY name DESC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByNameDesc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY name ASC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByNameAsc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY name DESC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByNameDesc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY countryCode ASC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByCountryCodeAsc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY countryCode DESC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByCountryCodeDesc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY countryCode ASC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByCountryCodeAsc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY countryCode DESC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByCountryCodeDesc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY counter ASC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByCounterAsc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY counter DESC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByCounterDesc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY counter ASC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByCounterAsc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY counter DESC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByCounterDesc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY mediation ASC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByMediationAsc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} ORDER BY mediation DESC OFFSET ?#{[2]} ROWS FETCH NEXT ?#{[3]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListOrderByMediationDesc(Integer callId, String country, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY mediation ASC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByMediationAsc(Integer callId, String country, String name, Integer offset, Integer count);

    @Query(value = "SELECT DISTINCT(m1.lau) as lauId, m1.name as name, l.country_code as countryCode, (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) as counter, (SELECT CASE WHEN sum(th.mediation) > 0 THEN 1 ELSE 0 END FROM threads th WHERE th.reason = m1.lau AND th.type = 1) AS mediation, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app._status END) AS status, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN -1 ELSE app.date END) AS applicationDate, (SELECT CASE WHEN (SELECT COUNT(1) FROM applications INNER JOIN registrations reg ON reg.id = applications.registration INNER JOIN municipalities mun ON mun.id = reg.municipality WHERE mun.lau = m1.lau) > 1 THEN NULL ELSE app.invalidate_reason END) AS invalidateReason FROM municipalities m1 INNER JOIN registrations reg ON reg.municipality = m1.id INNER JOIN applications app ON app.registration = reg.id INNER JOIN laus l ON l.id = m1.lau WHERE l.country_code LIKE ?#{[1]} AND app.call_id = ?#{[0]} AND LOWER(name) LIKE LOWER(CONCAT('%',?#{[2]},'%')) ORDER BY mediation DESC OFFSET ?#{[3]} ROWS FETCH NEXT ?#{[4]} ROWS ONLY", nativeQuery = true)
    List<ApplicantListItem> findDgconnApplicantsListContainingNameOrderByMediationDesc(Integer callId, String country, String name, Integer offset, Integer count);
}