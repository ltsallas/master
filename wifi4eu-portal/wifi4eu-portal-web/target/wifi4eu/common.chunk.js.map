{"version":3,"sources":["/Users/rgarcita/Proyectos/wifi4EU/wifi4eu/wifi4eu-portal/wifi4eu-portal-web/src/main/angular/src/app/shared/models/beneficiary-details.model.ts","/Users/rgarcita/Proyectos/wifi4EU/wifi4eu/wifi4eu-portal/wifi4eu-portal-web/src/main/angular/src/app/shared/swagger/api/BeneficiaryApi.ts","/Users/rgarcita/Proyectos/wifi4EU/wifi4eu/wifi4eu-portal/wifi4eu-portal-web/src/main/angular/src/app/shared/swagger/api/LauApi.ts","/Users/rgarcita/Proyectos/wifi4EU/wifi4eu/wifi4eu-portal/wifi4eu-portal-web/src/main/angular/src/app/shared/swagger/api/SupplierApi.ts"],"names":[],"mappings":"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","file":"common.chunk.js","sourcesContent":["export class BeneficiaryDetails {\n    public treatment: string;\n    public name: string;\n    public surname: string;\n    public email: string;\n    public password: string;\n    public confirmEmail: string; // TODO - This should not be an attribute\n    // TODO - Representative need to be treated as an object instance\n    public representativeSelected: boolean;\n    public treatmentRepresentative: string;\n    public nameRepresentative: string;\n    public surnameRepresentative: string;\n    public roleRepresentative: string;\n    public emailRepresentative: string;\n    public confirmEmailRepresentative: string;\n    public newPassword: string;\n    public repeatNewPassword: string; // TODO - This should not be an attribute\n    public currentPassword: string;\n\n    public constructor() {\n        this.representativeSelected = false;\n        this.currentPassword = '';\n        this.newPassword = '';\n        this.repeatNewPassword = '';\n        this.emailRepresentative = '';\n\n    }\n}\n\n\n// WEBPACK FOOTER //\n// /Users/rgarcita/Proyectos/wifi4EU/wifi4eu/wifi4eu-portal/wifi4eu-portal-web/src/main/angular/src/app/shared/models/beneficiary-details.model.ts","// tslint:disable:no-unused-variable member-ordering\n// noinspection ES6UnusedImports\n\nimport {serialize, deserialize, deserializeArray, plainToClass, classToPlain} from 'class-transformer';\nimport {Inject, Injectable, Optional, OpaqueToken} from '@angular/core';\nimport {\n  Http,\n  Headers,\n  URLSearchParams,\n  RequestMethod,\n  RequestOptions,\n  RequestOptionsArgs,\n  Response,\n  ResponseContentType\n} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport * as models from '../model/models';\nimport {BASE_PATH} from '../variables';\nimport {Configuration} from '../configuration';\nimport {ClassType} from '../classType';\n\n\nexport const IBeneficiaryApi = new OpaqueToken('IBeneficiaryApi');\n\nexport interface IBeneficiaryApi {\n\n\n    /**\n     * Apply for voucher\n     * \n     * @param c \n     * @param beneficiaryId \n     * @param body \n     */\n    apply<T extends models.ResponseDTO>(beneficiaryId: number, body?: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * create Beneficiary\n     * \n     * @param c \n     * @param body \n     */\n    create<T extends models.ResponseDTO>(body?: models.BeneficiaryDTO, c?: ClassType<T>): Observable<T>;\n    /**\n     * find by BeneficiaryId and PublicationId\n     * \n     * @param c \n     * @param beneficiaryId \n     * @param publicationId \n     */\n    findByBeneficiaryIdAndPublicationId<T extends models.BenPubSupDTO>(beneficiaryId: number, publicationId: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * Get awarded legal entities\n     * \n     * @param c \n     */\n    getAwardedMunicipalities<T extends models.LegalEntityDTO>(c?: ClassType<T>): Observable<T[]>;\n    /**\n     * Get legal entities\n     * \n     * @param c \n     */\n    getLegalEntities<T extends models.LegalEntityDTO>(c?: ClassType<T>): Observable<T[]>;\n    /**\n     * get legal Entity information\n     * \n     * @param c \n     * @param legalEntityId \n     */\n    getLegalEntity<T extends models.LegalEntityDTO>(legalEntityId: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * get mayor by id\n     * \n     * @param c \n     * @param mayorId \n     */\n    getMayorById<T extends models.MayorDTO>(mayorId: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * get representative by id\n     * \n     * @param c \n     * @param representativeId \n     */\n    getRepresentativeById<T extends models.RepresentativeDTO>(representativeId: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * Select supplier\n     * \n     * @param c \n     * @param beneficiaryId \n     * @param publicationId \n     * @param body \n     */\n    selectSupplier<T extends models.ResponseDTO>(beneficiaryId: number, publicationId: number, body?: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * Update beneficiary information\n     * \n     * @param c \n     * @param beneficiaryId \n     * @param body \n     */\n    update<T extends models.ResponseDTO>(beneficiaryId: number, body?: models.BeneficiaryDTO, c?: ClassType<T>): Observable<T>;\n\n}\n\n@Injectable()\nexport class BeneficiaryApi implements IBeneficiaryApi {\n    protected basePath = 'http://localhost:8080/wifi4eu/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http,\n                @Optional() @Inject(BASE_PATH) basePath: string,\n                @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n        }\n    }\n\n\n\n    /**\n     * Apply for voucher\n     * \n     * @param c\n     * @param beneficiaryId \n     * @param body \n     */\n    apply<T extends models.ResponseDTO>(beneficiaryId: number, body?: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.applyWithHttpInfo(beneficiaryId, body)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * create Beneficiary\n     * \n     * @param c\n     * @param body \n     */\n    create<T extends models.ResponseDTO>(body?: models.BeneficiaryDTO, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.createWithHttpInfo(body)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * find by BeneficiaryId and PublicationId\n     * \n     * @param c\n     * @param beneficiaryId \n     * @param publicationId \n     */\n    findByBeneficiaryIdAndPublicationId<T extends models.BenPubSupDTO>(beneficiaryId: number, publicationId: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.findByBeneficiaryIdAndPublicationIdWithHttpInfo(beneficiaryId, publicationId)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * Get awarded legal entities\n     * \n     * @param c\n     */\n    getAwardedMunicipalities<T extends models.LegalEntityDTO>(c?: ClassType<T>): Observable<T[]> {\n\n        return this.getAwardedMunicipalitiesWithHttpInfo()\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserializeArray(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * Get legal entities\n     * \n     * @param c\n     */\n    getLegalEntities<T extends models.LegalEntityDTO>(c?: ClassType<T>): Observable<T[]> {\n\n        return this.getLegalEntitiesWithHttpInfo()\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserializeArray(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * get legal Entity information\n     * \n     * @param c\n     * @param legalEntityId \n     */\n    getLegalEntity<T extends models.LegalEntityDTO>(legalEntityId: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.getLegalEntityWithHttpInfo(legalEntityId)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * get mayor by id\n     * \n     * @param c\n     * @param mayorId \n     */\n    getMayorById<T extends models.MayorDTO>(mayorId: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.getMayorByIdWithHttpInfo(mayorId)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * get representative by id\n     * \n     * @param c\n     * @param representativeId \n     */\n    getRepresentativeById<T extends models.RepresentativeDTO>(representativeId: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.getRepresentativeByIdWithHttpInfo(representativeId)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * Select supplier\n     * \n     * @param c\n     * @param beneficiaryId \n     * @param publicationId \n     * @param body \n     */\n    selectSupplier<T extends models.ResponseDTO>(beneficiaryId: number, publicationId: number, body?: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.selectSupplierWithHttpInfo(beneficiaryId, publicationId, body)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * Update beneficiary information\n     * \n     * @param c\n     * @param beneficiaryId \n     * @param body \n     */\n    update<T extends models.ResponseDTO>(beneficiaryId: number, body?: models.BeneficiaryDTO, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.updateWithHttpInfo(beneficiaryId, body)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n    /**\n     * Apply for voucher\n     * \n     * @param beneficiaryId \n     * @param body \n     */\n    private applyWithHttpInfo(beneficiaryId: number,  body?: number ): Observable<Response> {\n        const path = this.basePath + `/beneficiary/${beneficiaryId}/apply`;\n//        .replace('{' + 'beneficiaryId' + '}', String(beneficiaryId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'beneficiaryId' is not null or undefined\n        if (beneficiaryId === null || beneficiaryId === undefined) {\n            throw new Error('Required parameter beneficiaryId was null or undefined when calling apply.');\n        }\n\n\n\n\n\n        headers.set('Content-Type', 'application/json');\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: body == null ? '' : /*JSON.stringify*/classToPlain(body), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * create Beneficiary\n     * \n     * @param body \n     */\n    private createWithHttpInfo(body?: models.BeneficiaryDTO ): Observable<Response> {\n        const path = this.basePath + `/beneficiary`;\n\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n\n\n\n        headers.set('Content-Type', 'application/json');\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: body == null ? '' : /*JSON.stringify*/classToPlain(body), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * find by BeneficiaryId and PublicationId\n     * \n     * @param beneficiaryId \n     * @param publicationId \n     */\n    private findByBeneficiaryIdAndPublicationIdWithHttpInfo(beneficiaryId: number,  publicationId: number ): Observable<Response> {\n        const path = this.basePath + `/beneficiary/${beneficiaryId}/checkApplied/${publicationId}`;\n//        .replace('{' + 'beneficiaryId' + '}', String(beneficiaryId)) \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)//        .replace('{' + 'publicationId' + '}', String(publicationId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'beneficiaryId' is not null or undefined\n        if (beneficiaryId === null || beneficiaryId === undefined) {\n            throw new Error('Required parameter beneficiaryId was null or undefined when calling findByBeneficiaryIdAndPublicationId.');\n        }\n        // verify required parameter 'publicationId' is not null or undefined\n        if (publicationId === null || publicationId === undefined) {\n            throw new Error('Required parameter publicationId was null or undefined when calling findByBeneficiaryIdAndPublicationId.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Get awarded legal entities\n     * \n     */\n    private getAwardedMunicipalitiesWithHttpInfo(): Observable<Response> {\n        const path = this.basePath + `/beneficiary/awarded`;\n\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Get legal entities\n     * \n     */\n    private getLegalEntitiesWithHttpInfo(): Observable<Response> {\n        const path = this.basePath + `/beneficiary`;\n\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * get legal Entity information\n     * \n     * @param legalEntityId \n     */\n    private getLegalEntityWithHttpInfo(legalEntityId: number ): Observable<Response> {\n        const path = this.basePath + `/beneficiary/${legalEntityId}`;\n//        .replace('{' + 'legalEntityId' + '}', String(legalEntityId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'legalEntityId' is not null or undefined\n        if (legalEntityId === null || legalEntityId === undefined) {\n            throw new Error('Required parameter legalEntityId was null or undefined when calling getLegalEntity.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * get mayor by id\n     * \n     * @param mayorId \n     */\n    private getMayorByIdWithHttpInfo(mayorId: number ): Observable<Response> {\n        const path = this.basePath + `/beneficiary/mayor/${mayorId}`;\n//        .replace('{' + 'mayorId' + '}', String(mayorId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'mayorId' is not null or undefined\n        if (mayorId === null || mayorId === undefined) {\n            throw new Error('Required parameter mayorId was null or undefined when calling getMayorById.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * get representative by id\n     * \n     * @param representativeId \n     */\n    private getRepresentativeByIdWithHttpInfo(representativeId: number ): Observable<Response> {\n        const path = this.basePath + `/beneficiary/representative/${representativeId}`;\n//        .replace('{' + 'representativeId' + '}', String(representativeId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'representativeId' is not null or undefined\n        if (representativeId === null || representativeId === undefined) {\n            throw new Error('Required parameter representativeId was null or undefined when calling getRepresentativeById.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Select supplier\n     * \n     * @param beneficiaryId \n     * @param publicationId \n     * @param body \n     */\n    private selectSupplierWithHttpInfo(beneficiaryId: number,  publicationId: number,  body?: number ): Observable<Response> {\n        const path = this.basePath + `/beneficiary/${beneficiaryId}/publication/${publicationId}/supplier`;\n//        .replace('{' + 'beneficiaryId' + '}', String(beneficiaryId)) \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)//        .replace('{' + 'publicationId' + '}', String(publicationId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'beneficiaryId' is not null or undefined\n        if (beneficiaryId === null || beneficiaryId === undefined) {\n            throw new Error('Required parameter beneficiaryId was null or undefined when calling selectSupplier.');\n        }\n        // verify required parameter 'publicationId' is not null or undefined\n        if (publicationId === null || publicationId === undefined) {\n            throw new Error('Required parameter publicationId was null or undefined when calling selectSupplier.');\n        }\n\n\n\n\n\n        headers.set('Content-Type', 'application/json');\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Put,\n            headers: headers,\n            body: body == null ? '' : /*JSON.stringify*/classToPlain(body), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Update beneficiary information\n     * \n     * @param beneficiaryId \n     * @param body \n     */\n    private updateWithHttpInfo(beneficiaryId: number,  body?: models.BeneficiaryDTO ): Observable<Response> {\n        const path = this.basePath + `/beneficiary/${beneficiaryId}`;\n//        .replace('{' + 'beneficiaryId' + '}', String(beneficiaryId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'beneficiaryId' is not null or undefined\n        if (beneficiaryId === null || beneficiaryId === undefined) {\n            throw new Error('Required parameter beneficiaryId was null or undefined when calling update.');\n        }\n\n\n\n\n\n        headers.set('Content-Type', 'application/json');\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: body == null ? '' : /*JSON.stringify*/classToPlain(body), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/rgarcita/Proyectos/wifi4EU/wifi4eu/wifi4eu-portal/wifi4eu-portal-web/src/main/angular/src/app/shared/swagger/api/BeneficiaryApi.ts","// tslint:disable:no-unused-variable member-ordering\n// noinspection ES6UnusedImports\n\nimport {serialize, deserialize, deserializeArray, plainToClass, classToPlain} from 'class-transformer';\nimport {Inject, Injectable, Optional, OpaqueToken} from '@angular/core';\nimport {\n  Http,\n  Headers,\n  URLSearchParams,\n  RequestMethod,\n  RequestOptions,\n  RequestOptionsArgs,\n  Response,\n  ResponseContentType\n} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport * as models from '../model/models';\nimport {BASE_PATH} from '../variables';\nimport {Configuration} from '../configuration';\nimport {ClassType} from '../classType';\n\n\nexport const ILauApi = new OpaqueToken('ILauApi');\n\nexport interface ILauApi {\n\n\n    /**\n     * create LAU\n     * \n     * @param c \n     * @param body \n     */\n    create<T extends models.ResponseDTO>(body?: models.LauDTO, c?: ClassType<T>): Observable<T>;\n    /**\n     * get Lau by Country Code i.e: ES\n     * \n     * @param c \n     * @param countryCode \n     */\n    findLauByCountryCode<T extends models.LauDTO>(countryCode: string, c?: ClassType<T>): Observable<T[]>;\n    /**\n     * get Lau by LAU2 and Country Code i.e: 08019\n     * \n     * @param c \n     * @param lau2 \n     * @param countryCode \n     */\n    findLauByLau2AndCountryCode<T extends models.LauDTO>(lau2: string, countryCode: string, c?: ClassType<T>): Observable<T>;\n    /**\n     * get Lau by NUTS3 i.e: ES513\n     * \n     * @param c \n     * @param nuts3 \n     */\n    findLauByNuts3<T extends models.LauDTO>(nuts3: string, c?: ClassType<T>): Observable<T[]>;\n\n}\n\n@Injectable()\nexport class LauApi implements ILauApi {\n    protected basePath = 'http://localhost:8080/wifi4eu/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http,\n                @Optional() @Inject(BASE_PATH) basePath: string,\n                @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n        }\n    }\n\n\n\n    /**\n     * create LAU\n     * \n     * @param c\n     * @param body \n     */\n    create<T extends models.ResponseDTO>(body?: models.LauDTO, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.createWithHttpInfo(body)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * get Lau by Country Code i.e: ES\n     * \n     * @param c\n     * @param countryCode \n     */\n    findLauByCountryCode<T extends models.LauDTO>(countryCode: string, c?: ClassType<T>): Observable<T[]> {\n\n        return this.findLauByCountryCodeWithHttpInfo(countryCode)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserializeArray(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * get Lau by LAU2 and Country Code i.e: 08019\n     * \n     * @param c\n     * @param lau2 \n     * @param countryCode \n     */\n    findLauByLau2AndCountryCode<T extends models.LauDTO>(lau2: string, countryCode: string, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.findLauByLau2AndCountryCodeWithHttpInfo(lau2, countryCode)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * get Lau by NUTS3 i.e: ES513\n     * \n     * @param c\n     * @param nuts3 \n     */\n    findLauByNuts3<T extends models.LauDTO>(nuts3: string, c?: ClassType<T>): Observable<T[]> {\n\n        return this.findLauByNuts3WithHttpInfo(nuts3)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserializeArray(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n    /**\n     * create LAU\n     * \n     * @param body \n     */\n    private createWithHttpInfo(body?: models.LauDTO ): Observable<Response> {\n        const path = this.basePath + `/lau`;\n\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n\n\n\n        headers.set('Content-Type', 'application/json');\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: body == null ? '' : /*JSON.stringify*/classToPlain(body), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * get Lau by Country Code i.e: ES\n     * \n     * @param countryCode \n     */\n    private findLauByCountryCodeWithHttpInfo(countryCode: string ): Observable<Response> {\n        const path = this.basePath + `/lau/${countryCode}`;\n//        .replace('{' + 'countryCode' + '}', String(countryCode));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'countryCode' is not null or undefined\n        if (countryCode === null || countryCode === undefined) {\n            throw new Error('Required parameter countryCode was null or undefined when calling findLauByCountryCode.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * get Lau by LAU2 and Country Code i.e: 08019\n     * \n     * @param lau2 \n     * @param countryCode \n     */\n    private findLauByLau2AndCountryCodeWithHttpInfo(lau2: string,  countryCode: string ): Observable<Response> {\n        const path = this.basePath + `/lau/lau2/${lau2}/countryCode/${countryCode}`;\n//        .replace('{' + 'lau2' + '}', String(lau2)) \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)//        .replace('{' + 'countryCode' + '}', String(countryCode));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'lau2' is not null or undefined\n        if (lau2 === null || lau2 === undefined) {\n            throw new Error('Required parameter lau2 was null or undefined when calling findLauByLau2AndCountryCode.');\n        }\n        // verify required parameter 'countryCode' is not null or undefined\n        if (countryCode === null || countryCode === undefined) {\n            throw new Error('Required parameter countryCode was null or undefined when calling findLauByLau2AndCountryCode.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * get Lau by NUTS3 i.e: ES513\n     * \n     * @param nuts3 \n     */\n    private findLauByNuts3WithHttpInfo(nuts3: string ): Observable<Response> {\n        const path = this.basePath + `/lau/nuts3/${nuts3}`;\n//        .replace('{' + 'nuts3' + '}', String(nuts3));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'nuts3' is not null or undefined\n        if (nuts3 === null || nuts3 === undefined) {\n            throw new Error('Required parameter nuts3 was null or undefined when calling findLauByNuts3.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/rgarcita/Proyectos/wifi4EU/wifi4eu/wifi4eu-portal/wifi4eu-portal-web/src/main/angular/src/app/shared/swagger/api/LauApi.ts","// tslint:disable:no-unused-variable member-ordering\n// noinspection ES6UnusedImports\n\nimport {serialize, deserialize, deserializeArray, plainToClass, classToPlain} from 'class-transformer';\nimport {Inject, Injectable, Optional, OpaqueToken} from '@angular/core';\nimport {\n  Http,\n  Headers,\n  URLSearchParams,\n  RequestMethod,\n  RequestOptions,\n  RequestOptionsArgs,\n  Response,\n  ResponseContentType\n} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport * as models from '../model/models';\nimport {BASE_PATH} from '../variables';\nimport {Configuration} from '../configuration';\nimport {ClassType} from '../classType';\n\n\nexport const ISupplierApi = new OpaqueToken('ISupplierApi');\n\nexport interface ISupplierApi {\n\n\n    /**\n     * Get all the suppliers\n     * \n     * @param c \n     */\n    allSuppliers<T extends models.SupplierDTO>(c?: ClassType<T>): Observable<T[]>;\n    /**\n     * create access point\n     * \n     * @param c \n     * @param body \n     */\n    createAccessPoint<T extends models.ResponseDTO>(body?: models.AccessPointDTO, c?: ClassType<T>): Observable<T>;\n    /**\n     * create supplier\n     * \n     * @param c \n     * @param body \n     */\n    createSupplier<T extends models.ResponseDTO>(body?: models.SupplierDTO, c?: ClassType<T>): Observable<T>;\n    /**\n     * Get installation by installationId\n     * \n     * @param c \n     * @param installationId \n     */\n    getInstallationById<T extends models.InstallationDTO>(installationId: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * Get legal entity by installation id\n     * \n     * @param c \n     * @param installationId \n     */\n    getLegalEntityByInstallationId<T extends models.LegalEntityDTO>(installationId: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * Get selected by supplierId\n     * \n     * @param c \n     * @param supplierId \n     */\n    getSelectedMeBySupplierId<T extends models.LegalEntityDTO>(supplierId: number, c?: ClassType<T>): Observable<T[]>;\n    /**\n     * Get supplier by supplierId\n     * \n     * @param c \n     * @param supplierId \n     */\n    getSupplierById<T extends models.SupplierDTO>(supplierId: number, c?: ClassType<T>): Observable<T>;\n    /**\n     * save supplier\n     * \n     * @param c \n     * @param body \n     */\n    saveSupplier<T extends models.ResponseDTO>(body?: models.SupplierDTO, c?: ClassType<T>): Observable<T>;\n\n}\n\n@Injectable()\nexport class SupplierApi implements ISupplierApi {\n    protected basePath = 'http://localhost:8080/wifi4eu/api';\n    public defaultHeaders: Headers = new Headers();\n    public configuration: Configuration = new Configuration();\n\n    constructor(protected http: Http,\n                @Optional() @Inject(BASE_PATH) basePath: string,\n                @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n        }\n    }\n\n\n\n    /**\n     * Get all the suppliers\n     * \n     * @param c\n     */\n    allSuppliers<T extends models.SupplierDTO>(c?: ClassType<T>): Observable<T[]> {\n\n        return this.allSuppliersWithHttpInfo()\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserializeArray(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * create access point\n     * \n     * @param c\n     * @param body \n     */\n    createAccessPoint<T extends models.ResponseDTO>(body?: models.AccessPointDTO, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.createAccessPointWithHttpInfo(body)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * create supplier\n     * \n     * @param c\n     * @param body \n     */\n    createSupplier<T extends models.ResponseDTO>(body?: models.SupplierDTO, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.createSupplierWithHttpInfo(body)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * Get installation by installationId\n     * \n     * @param c\n     * @param installationId \n     */\n    getInstallationById<T extends models.InstallationDTO>(installationId: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.getInstallationByIdWithHttpInfo(installationId)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * Get legal entity by installation id\n     * \n     * @param c\n     * @param installationId \n     */\n    getLegalEntityByInstallationId<T extends models.LegalEntityDTO>(installationId: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.getLegalEntityByInstallationIdWithHttpInfo(installationId)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * Get selected by supplierId\n     * \n     * @param c\n     * @param supplierId \n     */\n    getSelectedMeBySupplierId<T extends models.LegalEntityDTO>(supplierId: number, c?: ClassType<T>): Observable<T[]> {\n\n        return this.getSelectedMeBySupplierIdWithHttpInfo(supplierId)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserializeArray(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * Get supplier by supplierId\n     * \n     * @param c\n     * @param supplierId \n     */\n    getSupplierById<T extends models.SupplierDTO>(supplierId: number, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.getSupplierByIdWithHttpInfo(supplierId)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n\n    /**\n     * save supplier\n     * \n     * @param c\n     * @param body \n     */\n    saveSupplier<T extends models.ResponseDTO>(body?: models.SupplierDTO, c?: ClassType<T>): Observable<T> {\n        // noinspection TypeScriptValidateTypes\n        return this.saveSupplierWithHttpInfo(body)\n                .map((response: Response) => {\n                    if (response.status === 204) {\n                        return undefined;\n                    } else if (c) {\n                        return deserialize(c, response.text());\n                    } else {\n                        return response.json();\n                    }\n                });\n        }\n\n\n\n    /**\n     * Get all the suppliers\n     * \n     */\n    private allSuppliersWithHttpInfo(): Observable<Response> {\n        const path = this.basePath + `/supplier`;\n\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * create access point\n     * \n     * @param body \n     */\n    private createAccessPointWithHttpInfo(body?: models.AccessPointDTO ): Observable<Response> {\n        const path = this.basePath + `/supplier/accessPoint`;\n\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n\n\n\n        headers.set('Content-Type', 'application/json');\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: body == null ? '' : /*JSON.stringify*/classToPlain(body), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * create supplier\n     * \n     * @param body \n     */\n    private createSupplierWithHttpInfo(body?: models.SupplierDTO ): Observable<Response> {\n        const path = this.basePath + `/supplier`;\n\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n\n\n\n        headers.set('Content-Type', 'application/json');\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: body == null ? '' : /*JSON.stringify*/classToPlain(body), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Get installation by installationId\n     * \n     * @param installationId \n     */\n    private getInstallationByIdWithHttpInfo(installationId: number ): Observable<Response> {\n        const path = this.basePath + `/supplier/${installationId}/installation`;\n//        .replace('{' + 'installationId' + '}', String(installationId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'installationId' is not null or undefined\n        if (installationId === null || installationId === undefined) {\n            throw new Error('Required parameter installationId was null or undefined when calling getInstallationById.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Get legal entity by installation id\n     * \n     * @param installationId \n     */\n    private getLegalEntityByInstallationIdWithHttpInfo(installationId: number ): Observable<Response> {\n        const path = this.basePath + `/supplier/legalEntityByInstallation/${installationId}`;\n//        .replace('{' + 'installationId' + '}', String(installationId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'installationId' is not null or undefined\n        if (installationId === null || installationId === undefined) {\n            throw new Error('Required parameter installationId was null or undefined when calling getLegalEntityByInstallationId.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Get selected by supplierId\n     * \n     * @param supplierId \n     */\n    private getSelectedMeBySupplierIdWithHttpInfo(supplierId: number ): Observable<Response> {\n        const path = this.basePath + `/supplier/selectedBy/${supplierId}`;\n//        .replace('{' + 'supplierId' + '}', String(supplierId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'supplierId' is not null or undefined\n        if (supplierId === null || supplierId === undefined) {\n            throw new Error('Required parameter supplierId was null or undefined when calling getSelectedMeBySupplierId.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * Get supplier by supplierId\n     * \n     * @param supplierId \n     */\n    private getSupplierByIdWithHttpInfo(supplierId: number ): Observable<Response> {\n        const path = this.basePath + `/supplier/${supplierId}`;\n//        .replace('{' + 'supplierId' + '}', String(supplierId));  \n// not needed as long as the Angular2Typescript language generates the path as TypeScript template string \n// (https://basarat.gitbooks.io/typescript/content/docs/template-strings.html)\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n        // verify required parameter 'supplierId' is not null or undefined\n        if (supplierId === null || supplierId === undefined) {\n            throw new Error('Required parameter supplierId was null or undefined when calling getSupplierById.');\n        }\n\n\n\n\n\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Get,\n            headers: headers,\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n    /**\n     * save supplier\n     * \n     * @param body \n     */\n    private saveSupplierWithHttpInfo(body?: models.SupplierDTO ): Observable<Response> {\n        const path = this.basePath + `/supplier/save`;\n\n\n        let queryParameters = new URLSearchParams();\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\n\n\n\n\n\n        headers.set('Content-Type', 'application/json');\n\n\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\n            method: RequestMethod.Post,\n            headers: headers,\n            body: body == null ? '' : /*JSON.stringify*/classToPlain(body), // https://github.com/angular/angular/issues/10612\n            search: queryParameters,\n            responseType: ResponseContentType.Json\n        });\n\n        return this.http.request(path, requestOptions);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/rgarcita/Proyectos/wifi4EU/wifi4eu/wifi4eu-portal/wifi4eu-portal-web/src/main/angular/src/app/shared/swagger/api/SupplierApi.ts"],"sourceRoot":"webpack:///"}