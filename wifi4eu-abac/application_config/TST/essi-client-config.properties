# If true, fake implementation which does not contact ECAS and eSig servers is used (and which thusly does not provide any useful results)
useFakeImplementation=false
# The time each call to fake sign/validate/extend method waits before returning to more closely simulate the wait time from a call.
fakeImplementationWaitTimeSeconds=0

useSunHttpsImplementation=true

# Possible values for createTestSignature are: false | withoutAuth | withAuth
#   if "false", it will be tried to create a signature using DG-specific signature service
#   if "withAuth", it will be tried to create a test signature, but still all the authorization checks will be performed (as is automatically in the "false" case)
#   if "withoutAuth", it will be tried to create a test signature (without further authorization checks)
createTestSignature=withAuth


# Environment setting - Possible values: TEST, VAL, PROD. It can also be left commented out in which case the default configured at the eSig server will be used.
sign.environment=PROD
extend.environment=PROD
validate.environment=PROD


##### ECAS job account client certificate #####
# Key store must reside in class path of application
scriptUser.keyStoreResourceName=j92ape7.p12
scriptUser.keyStoreType=PKCS12
# Optional parameter. It seems that SunJSSE scriptUser.keyStoreProvider can only be used with scriptUser.keyStoreType PKCS12 (but not with JKS).
scriptUser.keyStoreProvider=SunJSSE
scriptUser.privateKeyAlias=j92ape7
scriptUser.keyStorePassword=Z9BK1+LBOUAHQ2Hap/HWUgFjZc6/iCzRuEimj9ZjwOIGl5u8vJrPzBP18FC2lRIBwVbGVh41jHktnxKKJ7syyte2Cc0iVoAX4YpefVneqhQhpV1C
#scriptUser.privateKeyPassword is optional. Needs to be specified if the scriptUser.privateKeyPassword differes from the scriptUser.keyStorePassword.
scriptUser.privateKeyPassword=Z9BK1+LBOUAHQ2Hap/HWUgFjZc6/iCzRuEimj9ZjwOIGl5u8vJrPzBP18FC2lRIBwVbGVh41jHktnxKKJ7syyte2Cc0iVoAX4YpefVneqhQhpV1C


###########################################################################
## Additional configuration - Should only be changed in case of problems ##
###########################################################################

### SSL Debugging ###
debugSslToStdOut=false

### ECAS server connection configuration ###
scriptUser.maxConnections=5
scriptUser.connectTimeoutMillis=15000
scriptUser.readTimeoutMillis=15000
scriptUser.verifyHostname=true

### eSig server URLs ###
#esigServerSignerBaseUrl=https://webgate.acceptance.ec.europa.eu/esig/sign
#esigServerExtenderBaseUrl=https://webgate.acceptance.ec.europa.eu/esig/extendDetailed
#esigServerValidatorBaseUrl=https://webgate.acceptance.ec.europa.eu/esig/validateDetailed
esigServerSignerBaseUrl=https://webgate.ec.europa.eu/esig/sign
esigServerExtenderBaseUrl=https://webgate.ec.europa.eu/esig/extendDetailed
esigServerValidatorBaseUrl=https://webgate.ec.europa.eu/esig/validateDetailed

### ScriptClient ECAS URL ###
scriptUser.ecasServerCertLoginUrl=https://ecas.cc.cec.eu.int:7003/cas/ws/CertLoginService/http/post

# If retry.maxRetryAttempts > 0, client will retry eSig request on certain conditionas, i.e. when the service is (probably temporarily) unavailable
retry.maxRetryAttempts=2
retry.service.unavailable.webgate.redirect.url=https://sorry.ec.europa.eu/
# if retry.condition.logAtInfoLevel=false, a detected retry condition (i.e. service is unavailable) will be logged with WARN level during retries
retry.condition.logAtInfoLevel=true
retry.waitTime.seconds.from=5
retry.waitTime.seconds.to=15
retry.waitTime.exponentialBackoffFactor=2

scriptUser.additionalTrustedCertificateResourceName=/ecasweb-certifprod.crt
