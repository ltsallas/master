
package generated.hrs.ws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import generated.hrs.ws.model.CreateFile;
import generated.hrs.ws.model.CreateFileResponse;
import generated.hrs.ws.model.DeleteFile;
import generated.hrs.ws.model.DeleteFileResponse;
import generated.hrs.ws.model.GetUpdateFileStatusAsyncResult;
import generated.hrs.ws.model.GetUpdateFileStatusAsyncResultResponse;
import generated.hrs.ws.model.GetUserFavoriteFiles;
import generated.hrs.ws.model.GetUserFavoriteFilesResponse;
import generated.hrs.ws.model.ObjectFactory;
import generated.hrs.ws.model.SearchFilesByExpression;
import generated.hrs.ws.model.SearchFilesByExpressionResponse;
import generated.hrs.ws.model.SearchHeadingsByExpression;
import generated.hrs.ws.model.SearchHeadingsByExpressionResponse;
import generated.hrs.ws.model.UpdateFile;
import generated.hrs.ws.model.UpdateFileResponse;
import generated.hrs.ws.model.UpdateFileStatus;
import generated.hrs.ws.model.UpdateFileStatusAsync;
import generated.hrs.ws.model.UpdateFileStatusAsyncResponse;
import generated.hrs.ws.model.UpdateFileStatusResponse;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.1
 * 
 */
@WebService(name = "FilingPlanService", targetNamespace = "http://ec.europa.eu/sg/hrs")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface FilingPlanService {


    /**
     * This operation searches files that match the given search expression.
     * 
     *                 <p>Fields that can be used inside the search expression are:</p>
     *                 <ul>
     *                 <li> fileId - the file's id </li>
     *                 <li> name - either the name in EN, FR or DE </li>
     *                 <li> nameEN - the English name of the file </li>
     *                 <li> nameFR - the French name of the file </li>
     *                 <li> nameDE - the German name of the file </li>
     *                 <li> fileCode - the code of the file </li>
     *                 <li> specificCode - the specific code of the file </li>
     *                 <li> headingCode - the code of the heading under which this file is situated </li>
     *                 <li> isSubFile - whether we are searching for top level files or subfiles </li>
     *                 <li> status - the status of the file (i.e. ACTIVE, INACTIVE, CLOSED, TRANSFERRED) </li>
     *                 <li> chefDeFile - owner of the file </li>
     *                 <li> parentId - the repository id of the parent file or parent heading </li>
     *                 <li> creationDate - the date the file was created </li>
     *                 <li> activationDate - the date the file was (re-)activated </li>
     *                 </ul>
     * 
     *                 <p>Sample search expressions are:</p>
     *                 <ul style="list-style-type:none">
     *                  <li> chefDeFile CONTAINS 'digit' AND status='ACTIVE' </li>
     *                  <li> name IN ('test 1', 'test 2' ) </li>
     *                 </ul>
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.SearchFilesByExpressionResponse
     */
    @WebMethod
    @WebResult(name = "searchFilesByExpressionResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public SearchFilesByExpressionResponse searchFilesByExpression(
        @WebParam(name = "searchFilesByExpression", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        SearchFilesByExpression parameters);

    /**
     * This operation searches headings that match the given search expression.
     * 
     *                 <p>Fields that can be used inside the search expression are:</p>
     *                 <ul>
     *                 <li> headingId - the heading's id </li>
     *                 <li> name - either the name in EN, FR or DE </li>
     *                 <li> nameEN - the English name of the heading </li>
     *                 <li> nameFR - the French name of the heading </li>
     *                 <li> nameDE - the German name of the heading </li>
     *                 <li> headingCode - the code of the heading </li>
     *                 <li> specificCode - the specific code of the heading </li>
     *                 <li> creationDate - the creation date of the heading </li>
     *                 <li> status - the status of the heading </li>
     *                 <li> categoryKey - the ID of a category of the heading </li>
     *                 <li> serviceOwner - a service owner of the heading </li>
     *                 <li> fileCreator - a file creator of the heading </li>
     *                 <li> headingEditor - a heading creator of the heading </li>
     *                 <li> headingReader - a heading reader of the heading </li>
     *                 <li> status - the status of the heading (i.e. ACTIVE, INACTIVE, EXTINCT, FROZEN) </li>
     *                 </ul>
     * 
     *                 <p>Sample search expressions are:</p>
     *                 <ul style="list-style-type:none">
     *                  <li> nameEN CONTAINS 'Press, communication and publications' </li>
     *                  <li> status IN ('INACTIVE', 'EXTINCT', 'FROZEN') </li>
     *                 </ul>
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.SearchHeadingsByExpressionResponse
     */
    @WebMethod
    @WebResult(name = "searchHeadingsByExpressionResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public SearchHeadingsByExpressionResponse searchHeadingsByExpression(
        @WebParam(name = "searchHeadingsByExpression", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        SearchHeadingsByExpression parameters);

    /**
     * This operation creates a new (sub)file in the NOMCOM filing plan.
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.CreateFileResponse
     */
    @WebMethod
    @WebResult(name = "createFileResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public CreateFileResponse createFile(
        @WebParam(name = "createFile", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        CreateFile parameters);

    /**
     * This operation updates and existing (sub)file in the NOMCOM filing plan.<br/>
     *                 Only the fields provided in the web service request will be updated, the others will
     *                 stay as they are.<br />
     * 
     *                 The user needs to have FILE_EDITOR or NOMCOM_MANAGER rights on the file in order to update it.
     *                 To check this, you can search using the flag includeUserFileRole=true, and inspect
     *                 afterwards the value of the userFileRole element in the response. Also, the
     *                 file status needs to be ACTIVE or INACTIVE (e.g. CLOSED files cannot be updated) <br/>
     * 
     *                 <b>WARNING</b>: if you update the file readers, users or editors, the security of
     *                 all the documents that are filed in the file must be updated! This might fail if a
     *                 document has a checked out item. In case there are many documents filed in the file
     *                 <ul>the response time is unpredictable</ul> and it will take a very long time!
     * 
     *                 If the file is CLOSED, you can not update the specific code, titles, comments,
     *                 limited, chef de file and desk officer. An exception will be thrown.
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.UpdateFileResponse
     */
    @WebMethod
    @WebResult(name = "updateFileResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public UpdateFileResponse updateFile(
        @WebParam(name = "updateFile", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        UpdateFile parameters);

    /**
     * This operation updates the status of a (sub)file in the NOMCOM filing plan.<br/>
     *                 It allows you to update the state (INACTIVE, ACTIVE, ...) of the file in the file
     *                 lifecycle.
     *                 Currently only activation (INACTIVE -> ACTIVE) is supported in HRS.
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.UpdateFileStatusResponse
     */
    @WebMethod
    @WebResult(name = "updateFileStatusResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public UpdateFileStatusResponse updateFileStatus(
        @WebParam(name = "updateFileStatus", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        UpdateFileStatus parameters);

    /**
     * This operation updates asynchronously the status of a (sub)file in the NOMCOM filing plan.<br/>
     *                 It allows you to update the state (INACTIVE, ACTIVE, ...) of the file in the file lifecycle.
     *                 Currently only closing a file (ACTIVE -> CLOSED) is supported in HRS.<br/>
     *                 The operation will do some validations (e.g. user is a FILE EDITOR of the selected file, file is ACTIVE)
     *                 and schedule an asynchronous job for setting the updating the status to the file and its subfiles.<br/>
     *                 The user can check the status of the scheduled job by calling the getUpdateFileStatusAsyncResult operation.<br/>
     * 
     *                 <b>WARNING</b>: In order to perform this operation the user must have a special profile configured by the HRS team.
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.UpdateFileStatusAsyncResponse
     */
    @WebMethod
    @WebResult(name = "updateFileStatusAsyncResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public UpdateFileStatusAsyncResponse updateFileStatusAsync(
        @WebParam(name = "updateFileStatusAsync", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        UpdateFileStatusAsync parameters);

    /**
     * Get the current status of the last asynchronous operation launched for a (sub)file in the NOMCOM filing plan.<br/>
     *                 The operation should have been lauched using the updateFileStatusAsync operation.
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.GetUpdateFileStatusAsyncResultResponse
     */
    @WebMethod
    @WebResult(name = "getUpdateFileStatusAsyncResultResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public GetUpdateFileStatusAsyncResultResponse getUpdateFileStatusAsyncResult(
        @WebParam(name = "getUpdateFileStatusAsyncResult", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        GetUpdateFileStatusAsyncResult parameters);

    /**
     * This operation deletes a (sub)file from the NOMCOM filing plan.<br/>
     * 
     *                 A file can only be deleted if it's INACTIVE or ACTIVE, if there are no documents
     *                 filed into the file and if the file does not contain sub files.
     *                 The user needs to have FILE_EDITOR or NOMCOM_MANAGER rights on the file in order to delete it.
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.DeleteFileResponse
     */
    @WebMethod
    @WebResult(name = "deleteFileResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public DeleteFileResponse deleteFile(
        @WebParam(name = "deleteFile", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        DeleteFile parameters);

    /**
     * Returns the favorite files of the current authenticated user.
     * 
     * @param parameters
     * @return
     *     returns generated.hrs.ws.model.GetUserFavoriteFilesResponse
     */
    @WebMethod
    @WebResult(name = "getUserFavoriteFilesResponse", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "result")
    public GetUserFavoriteFilesResponse getUserFavoriteFiles(
        @WebParam(name = "getUserFavoriteFiles", targetNamespace = "http://ec.europa.eu/sg/hrs/types", partName = "parameters")
        GetUserFavoriteFiles parameters);

}
